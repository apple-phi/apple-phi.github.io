import{a as h,t as p,f as l,A as d,r as c,s as e}from"./disclose-version.DcBcTE7C.js";import{s as m}from"./attributes.D9723m_v.js";const u=""+new URL("../assets/screenshot.BMqeTumy.png",import.meta.url).href;var f=p(`<img width="100%"> <p>I wrote a C++ program to render Martian terrain for the CUED Mars Lander competition.
The terrain is generated in modern OpenGL with shaders from high-res height-maps and textures from the MOLA instrument on the Mars Global Surveyor spacecraft.</p> <p>I was really interest in making the graphics look good,
so lighting is done with the Blinn-Phong reflection model and is gamma-corrected. As much pre-computation is done with compute shaders as possible to keep the rendering fast. The camera panning and zooming is done by quaternion calculations to avoid gimbal lock.</p> <p>Thereâ€™s a lot of physics involved in the competition, and I had to implement a lot of it myself. The lander is controlled by a PID controller, and is tuned to land on the ground without crashing.</p> <p>I was quite pleased that I managed to tie for 2nd place. If you feel like it, you can check out the public half of the source code (the CUED was quite insistent that I keep some of it private) on <a href="https://github.com/apple-phi/lander2" rel="nofollow">GitHub</a>.</p>`,1);const v={title:"CUED Mars Lander competition",subtitle:"Physically-accurate rendering of Martian terrain",date:"2023",tags:["C++","OpenGL","shaders","2k LOC"],href:"https://github.com/apple-phi/lander2"};function w(r){var t=f(),a=l(t);m(a,"src",u);var o=e(e(a,!0)),i=e(e(o,!0)),n=e(e(i,!0)),s=e(e(n,!0));d(),c(s),h(r,t)}export{w as default,v as metadata};
